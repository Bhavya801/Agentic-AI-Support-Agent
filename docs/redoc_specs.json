{
  "openapi": "3.0.0",
  "info": {
    "title": "AI-Powered Customer Support Agent",
    "description": "This is an automated system that processes incoming customer support emails. The system runs as a web service via Uvicorn, exposing specific endpoints, one of which is designed to be triggered by an external cron job. It analyzes emails using a large language model, then takes a corresponding action (reply or escalate). All interactions are logged to a Firebase Firestore database.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3218",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Cron Job",
      "description": "Endpoint for triggering the email processing job via an external scheduler."
    },
    {
      "name": "Health Check",
      "description": "Endpoints to check the status of the service."
    },
    {
      "name": "Documentation",
      "description": "Endpoint to view the API documentation."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Health Check"
        ],
        "summary": "Service Status",
        "description": "Returns a simple message to confirm the service is running.",
        "responses": {
          "200": {
            "description": "Service is operational.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "AI Support Agent Service is running. Email processing is handled by a separate cron job."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/processmail": {
      "get": {
        "tags": [
          "Cron Job"
        ],
        "summary": "Trigger Email Processing",
        "description": "This endpoint triggers the core email processing logic. It is designed to be called by an external cron service (e.g., a system cron job or a dedicated scheduler) on a regular basis to check for and handle new emails. It does not require any request body.",
        "operationId": "triggerEmailProcessing",
        "responses": {
          "200": {
            "description": "Email processing job triggered successfully. The output of the job is logged to the console.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email processing job triggered successfully."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error. The job could not be triggered due to a server-side issue."
          }
        }
      }
    },
    "/redocs": {
      "get": {
        "tags": [
          "Documentation"
        ],
        "summary": "API Documentation",
        "description": "Serves this OpenAPI specification as a beautifully rendered Redoc page.",
        "responses": {
          "200": {
            "description": "The Redoc page was served successfully.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>...</html>"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AIResponse": {
        "type": "object",
        "description": "The JSON object returned by the AI model.",
        "properties": {
          "action": {
            "type": "string",
            "description": "The action the agent should take.",
            "enum": [
              "reply",
              "escalate"
            ]
          },
          "response_text": {
            "type": "string",
            "description": "The text for the customer reply or a summary for the human agent."
          },
          "classification": {
            "type": "string",
            "description": "The category of the support query."
          }
        }
      },
      "SupportTicket": {
        "type": "object",
        "description": "The data model for a support ticket logged to Firestore.",
        "properties": {
          "from": {
            "type": "string",
            "description": "The email address of the sender."
          },
          "subject": {
            "type": "string",
            "description": "The subject of the email."
          },
          "body": {
            "type": "string",
            "description": "The full body of the email."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The time the email was processed."
          },
          "ai_action": {
            "type": "string",
            "description": "The action decided by the AI."
          },
          "ai_classification": {
            "type": "string",
            "description": "The classification assigned by the AI."
          },
          "ai_response_text": {
            "type": "string",
            "description": "The response or summary text from the AI."
          }
        }
      }
    }
  }
}
